#pragma once

#include <functional>

#include "platform/pwm_output/pwm_output.hh"

namespace fcp::aut {

/**
 * @brief Full bridge DC motor controlled by two PWM signals.
 */
class Motor {
 public:
  static constexpr float POWER_NEUTRAL = 0.0f;
  static constexpr float POWER_RANGE_MAX = 1.0f;
  static constexpr float POWER_RANGE_MIN = -POWER_RANGE_MAX;
  static constexpr float BRAKE_RANGE_MAX = POWER_RANGE_MAX;
  static constexpr float BRAKE_RANGE_MIN = POWER_NEUTRAL;

  /**
   * PWM signals control the motor in the following manner:
   * @verbatim
   * drive | reverse | function
   *     1 |       1 | brake
   *     1 |       0 | forward
   *     0 |       1 | backward
   *     0 |       0 | free
   * @verbatim
   */
  Motor(const platform::PWMOutput& drive, const platform::PWMOutput& reverse);

  /**
   * @brief Sets the power of the motor.
   *
   * @param power Driver power in range [-1.0f, 1.0f] which maps to full speed
   * backward to full speed forward.
   */
  void drive(const float power) const;

  /**
   * @brief Sets the braking power of the motor.
   *
   * @pre Two PWM signals must be aligned. They are generally aligned if
   * generated by the same hardware timer.
   * @param power Brake power in range [0.0f, 1.0f] which maps to no brake to
   * full brake.
   */
  void brake(const float power) const;

  /**
   * @brief Sets the motor to neutral, i.e. zero drive or brake power.
   */
  void neutral() const;

 private:
  const std::reference_wrapper<const platform::PWMOutput> drive_ref_;
  const std::reference_wrapper<const platform::PWMOutput> reverse_ref_;
};

}  // namespace fcp::aut
